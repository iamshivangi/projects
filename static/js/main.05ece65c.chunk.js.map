{"version":3,"sources":["square.js","Game.js","api.js","AutocompleteOption.js","Autocomplete.js","App.js","index.js"],"names":["Square","props","className","onClick","renderMoves","name","onClickHandler","board","renderBoard","squarelist","i","push","calculateWinner","toggleTurn","turn","move","alert","Game","useState","setTurn","Array","fill","setBoard","winner","map","idx","getAutocompleteSuggestions","query","callback","result","fetch","method","headers","then","response","json","data","results","catch","err","console","error","AutocompleteOption","href","link","throttleHandler","delay","enableCall","setTimeout","throttle","Autocomplete","func","wait","timeout","debounce","renderAutocompleteResults","elements","res","title","setState","handleOnChange","value","trim","replace","state","Fragment","type","placeholder","onChange","e","target","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05ece65c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = (props) => {\n  return (\n    <div\n      className=\"game__board__square\"\n      onClick={() => {\n        props.renderMoves(props.name);\n        props.onClickHandler(props.name);\n      }}\n    >\n      {props.board[props.name]}\n    </div>\n  );\n};\nexport default Square;\n","import Square from \"./square\";\nimport React, { useState } from \"react\";\nimport \"./Game.scss\";\n\nconst Game = () => {\n  const [turn, setTurn] = useState(\"X\");\n  const [board, setBoard] = useState(new Array(9).fill(null));\n  const winner = calculateWinner(board);\n\n  const onClickHandler = (move) => {\n    // toggles the turn \n    setTurn(toggleTurn(turn));\n  };\n  const renderMoves = (move) => {\n    // if the square has already been marked or there is already a winner \n    if (board[move] || winner) return;\n    setBoard(() => {\n      return board.map((i, idx) => {\n        return idx === move ? turn : i;\n      });\n    });\n  };\n  const resetBoard = () => {\n    setBoard(new Array(9).fill(null))\n    setTurn('X')\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game__title\">Welcome to TIC TAC TOE</div>\n      <div className=\"game__turn\">\n        {winner || `It is the turn of player ${turn}`}\n      </div>\n      <div className=\"game__board\">\n        {renderBoard(onClickHandler, board, renderMoves)}\n      </div>\n      <button className=\"game__reset\" onClick={() => resetBoard()}>Reset</button>\n\n    </div>\n  );\n};\n\nconst renderBoard = (onClickHandler, board, renderMoves) => {\n  let squarelist = [];\n  for (let i = 0; i < 9; i++) {\n    squarelist.push(\n      <Square\n        key={i}\n        name={i}\n        onClickHandler={onClickHandler}\n        renderMoves={renderMoves}\n        board={board}\n        calculateWinner={calculateWinner}\n      ></Square>\n    );\n  }\n  return squarelist;\n};\n\nconst toggleTurn = (turn) => {\n  return turn === \"X\" ? \"O\" : \"X\";\n};\n\nconst calculateWinner = (board) => {\n  // winning combinations\n  let winningMoves = [\"012\", \"345\", \"678\", \"036\", \"147\", \"258\", \"048\", \"246\"];\n  for (let move of winningMoves) {\n    if (\n      board[move[0]] &&\n      board[move[0]] === board[move[1]] &&\n      board[move[0]] === board[move[2]]\n    ) {\n      alert(`${board[move[0]]} is the winner`);\n      return board[move[0]];\n    }\n  }\n  return null;\n};\n\nexport default Game;\n","const getAutocompleteSuggestions = (query, callback) => {\n  let result;\n  fetch(\n    `https://google-search3.p.rapidapi.com/api/v1/search/q=${query}&num=20`,\n    {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-key\": \"2cfc8345e9mshb5f6d9cc440c6aep19345fjsn3b8d76320676\",\n        \"x-rapidapi-host\": \"google-search3.p.rapidapi.com\",\n      },\n    }\n  )\n    .then((response) => (response = response.json()))\n    .then((data) => {\n      result = data.results;\n      callback(result);\n    })\n\n    .catch((err) => {\n      console.error(err);\n    });\n};\n\nexport default getAutocompleteSuggestions;\n","import React from \"react\";\n\nconst AutocompleteOption = (props) => {\n  return (\n    <div className=\"autocomplete__result__output\">\n      <a href={props.link}>{props.name}</a>\n    </div>\n  );\n};\n\nexport default AutocompleteOption;\n","import React, { Component } from \"react\";\nimport getAutocompleteSuggestions from \"./api\";\nimport \"./Autocomple.css\";\nimport AutocompleteOption from \"./AutocompleteOption\";\n\n// function to implement debounce logic \nconst debounce = (func, wait) => {\n  // timer to keep track of cooldown\n  let timeout;\n\n  return (...args) => {\n    const later = () => {\n      timeout = null;\n      // execute function\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n// logic to implement throttle\nconst throttle = (callback, delay) => {\n  // if executed for first time\n  let enableCall = true;\n\n  return function (...args) {\n    if (!enableCall) return;\n\n    enableCall = false;\n    callback(...args);\n    setTimeout(() => {\n      enableCall = true;\n    }, delay);\n  };\n};\n\nconst throttleHandler = throttle(\n  (query, callback) => getAutocompleteSuggestions(query, callback),\n  500\n);\nconst debounceHandler = debounce(\n  (query) =>\n    getAutocompleteSuggestions(query, this.renderAutocompleteResults),\n  400\n);\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      elements: [],\n    };\n  }\n  renderAutocompleteResults = (results) => {\n    let elements = [];\n    for (let res of results) {\n      elements.push(\n        <AutocompleteOption\n          key={res.title}\n          name={res.title}\n          link={res.link}\n        ></AutocompleteOption>\n      );\n    }\n    this.setState({ elements: elements });\n  };\n\n  handleOnChange = (value) => {\n    // if value is empty do not trigger the function\n    if (value.trim()) {\n      let query = value.replace(/ /g, \"+\");\n      throttleHandler(query, this.renderAutocompleteResults);\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"autocomplete\">\n          <div className=\"autocomplete__header\">My Autocomplete</div>\n          <div className=\"autocomplete__search\">\n            <span className=\"fa fa-search\"></span>\n            <input\n              type=\"text\"\n              placeholder=\"Search..\"\n              className=\"autocomplete__input\"\n              onChange={(e) => {\n                this.handleOnChange(e.target.value);\n              }}\n            ></input>\n          </div>\n        </div>\n        <div className=\"autocomplete__results\">{this.state.elements}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;\n","import Game from \"./Game\";\nimport Autocomplete from \"./Autocomplete\"\nimport React from \"react\";\n\nconst App = () => {\n  return (\n    <div className=\"projects\">\n      <Game>\n\n      </Game>\n      <Autocomplete></Autocomplete>\n    </div>\n\n\n\n\n\n  )\n}\n\n\n\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App></App>, document.getElementById(\"root\"));\n"],"sourceRoot":""}